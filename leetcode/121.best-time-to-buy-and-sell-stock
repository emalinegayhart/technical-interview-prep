# Problem

[link to lc](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/?envType=study-plan-v2&envId=top-interview-150)

# Problem Description

```
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
```

# Approach

have variables for the minimum price and max profit... 
iterate through prices, update minimum price if its lower than the minimum price
calculate profit & if its more than the current max profit, update the max profit variable
when finished iterating, return the max profit

# Code 

```
def maxProfit(prices):
    min_price = float('inf')
    max_profit = 0
    
    for price in prices:
        if price < min_price:
            min_price = price
        elif price - min_price > max_profit:
            max_profit = price - min_price
    
    return max_profit
```

# Complexity
time complexity is O(n) because we only pass through the list once (n being the days in the list)
space complexity is O(1) since we are using a constant amount of space.